generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../_docs"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ContainerVolume {
  max Int
  min Int
}

type Cost {
  operator String? @default("ADD")
  value    Float
}

type FormatsProperties {
  concentration   Quantity
  container       String
  hasPreservative Boolean
  isSterile       Boolean
  quantity        Quantity
  solvent         String
}

type Quantity {
  unit  String
  value Float
}

type InStock {
  unit  String
  value Int
}

type ProductAvailableOptions {
  concentrations String[]                        @db.ObjectId
  containers     String[]                        @db.ObjectId
  quantity       ProductsOrderingOptionsQuantity
  solvents       String[]                        @db.ObjectId
}

type ProductsOrderingOptionsQuantity {
  available Int[]
  unit      String
}

type RolesPermissions {
  canCompleteOrders Boolean
  canEditProducts   Boolean
  canPlaceOrders    Boolean
  canWrite          Boolean
}

model concentrations {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  unit  String
  value Int
}

model containers {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  cost      Cost
  name      String
  septa     String?
  shortHand String
  top       String[]
  volume    ContainerVolume
}

model formats {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  cost       Cost
  properties FormatsProperties
  type       String
}

model Product {
  id              String                   @id @default(auto()) @map("_id") @db.ObjectId
  CAS             String
  description     String?
  formats         String[]
  inStock         InStock
  isFeatured      Boolean                  @default(false)
  iupac           String
  molImg          String?
  molName         String
  molSMILES       String
  molSlug         String
  orderingOptions ProductAvailableOptions?
  scaffold        String                   @db.ObjectId
  tags            String[]

  @@index([inStock])
  @@index([id])
  @@map("products")
}

enum RoleName {
  ADMIN
  KITTEN
  USER
}

model Role {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  roleName        RoleName         @default(USER)
  rolePermissions RolesPermissions
  users           User[]           @relation(fields: [userIDs], references: [id])
  userIDs         String[]         @db.ObjectId
}

model scaffolds {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar         String?
  iupac          String
  name           String
  products       String[] @db.ObjectId
  scaffoldSMILES String
}

model solvents {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  composition Json?
  cost        Cost
  description String
  name        String
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  firstName String
  lastName  String
  /// Could not determine type: the field only had null or empty values in the sample set.
  orders    Json?
  password  String
  /// Could not determine type: the field only had null or empty values in the sample set.
  posts     Post[]
  roles     Role[]   @relation(fields: [roleIDs], references: [id])
  roleIDs   String[] @db.ObjectId
  username  String

  @@map("users")
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String  @db.ObjectId
  content   String
  published Boolean
  title     String
}
