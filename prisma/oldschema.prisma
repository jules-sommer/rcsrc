generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../_docs"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Cost {
  operator String
  value    Float
}

type ContainersVolume {
  max Float
  min Float
}

type InStockQuantity {
  amount Float
  unit   String @default("g")
}

type ProductQuantitiesAvailable {
  value Int[]  @map("available")
  unit  String @default("mg")
}

type UserRolePermissions {
  changeOrderState      Boolean @default(false)
  canEditProducts       Boolean @default(false)
  canEditWebsiteType    Boolean @default(false)
  canEditOrders         Boolean @default(false)
  canPlaceOrder         Boolean @default(true)
  canViewAccountDetails Boolean @default(true)
  canPostToBlog         Boolean @default(false)
}

// Available concentrations of a solution product
model concentrations {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  unit  String @default("mg/mL")
  value Int
}

model containers {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  cost      Cost
  name      String
  septa     String? // if container has septa
  shortHand String? // shorthand for container
  top       String[] // array of tops that fit this container
  volume    ContainersVolume
}

model formats {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cost           Cost
  formatOptions  String[]
  formatProducts String[]
  formatType     String
}

model Cart {
  id             String   @id @map("_id") @db.ObjectId
  cartOwnerID    String   @unique @db.ObjectId
  orderCompleted Boolean  @default(false)
  paymentMethod  String   @default("e-transfer")
  orderStatus    String   @default("pending")
  orderDate      DateTime @default(now())
  orderNotes     String?  @default("")
  total          Float

  @@map("carts")
}

type ProductOrderingOptions {
  concentrations String[]                   @db.ObjectId
  containers     String[]                   @db.ObjectId
  solvents       String[]                   @db.ObjectId
  quantity       ProductQuantitiesAvailable
}

model Product {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  CAS             String
  description     String?
  formats         String[]                @db.ObjectId
  inStock         InStockQuantity
  isFeatured      Boolean?                @default(false)
  iupac           String
  molName         String
  molSMILES       String
  molSlug         String
  orderingOptions ProductOrderingOptions?
  scaffold        String                  @db.ObjectId
  tags            String[]                @default([])

  @@index([inStock])
  @@index([id])
  @@map("products")
}

enum Role {
  SUPER_ADMIN
  KITTEN
  EDITOR
  ADMIN
  USER
}

model roles {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  roleName        Role[]              @default([USER])
  rolePermissions UserRolePermissions
  roleUsers       String[]            @db.ObjectId
}

model scaffolds {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  avatar         String?
  iupac          String
  name           String
  scaffoldSMILES String  @unique
}

model solvents {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  composition Json?
  cost        Float[]
  description String
  name        String
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  firstName String
  lastName  String
  /// Could not determine type: the field only had null or empty values in the sample set.
  orders    Json?    @default("[]")
  password  String
  /// Could not determine type: the field only had null or empty values in the sample set.
  posts     Json?
  roles     String[] @db.ObjectId
  username  String
  cartId    String?  @db.ObjectId

  @@map("users")
}
